require('dotenv').config();
const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
const fs = require("fs");
const path = require("path");
const sharp = require("sharp");

class YandexStorageUploader {
  constructor() {
    const accessKeyId = process.env.YANDEX_ACCESS_KEY_ID;
    const secretAccessKey = process.env.YANDEX_SECRET_ACCESS_KEY;
    const bucketName = process.env.YANDEX_BUCKET_NAME || 'postcards-bucket';

    if (!accessKeyId || !secretAccessKey) {
      throw new Error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_ACCESS_KEY_ID –∏ YANDEX_SECRET_ACCESS_KEY');
    }

    this.client = new S3Client({
      region: 'ru-central1',
      endpoint: 'https://storage.yandexcloud.net',
      credentials: {
        accessKeyId: accessKeyId,
        secretAccessKey: secretAccessKey
      }
    });
    this.bucketName = bucketName;
    this.tempDir = path.join(__dirname, 'temp-optimized');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
  }

  async optimizeImage(inputPath, fileName) {
    try {
      const ext = path.extname(fileName).toLowerCase();
      const outputFileName = `${path.basename(fileName, ext)}.optimized${ext}`;
      const outputPath = path.join(this.tempDir, outputFileName);
      
      console.log(`üé® –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fileName}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sharp –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      let sharpInstance = sharp(inputPath);
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const metadata = await sharpInstance.metadata();
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let resizeOptions = {};
      if (metadata.width > 1200 || metadata.height > 1200) {
        resizeOptions = {
          width: Math.min(metadata.width, 1200),
          height: Math.min(metadata.height, 1200),
          fit: 'inside',
          withoutEnlargement: true
        };
        sharpInstance = sharpInstance.resize(resizeOptions);
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      switch (ext) {
        case '.jpg':
        case '.jpeg':
          sharpInstance = sharpInstance.jpeg({ 
            quality: 80,
            progressive: true,
            chromaSubsampling: '4:4:4'
          });
          break;
        case '.png':
          sharpInstance = sharpInstance.png({ 
            quality: 80,
            compressionLevel: 8,
            progressive: true
          });
          break;
        case '.webp':
          sharpInstance = sharpInstance.webp({ 
            quality: 80,
            lossless: false
          });
          break;
        default:
          // –î–ª—è GIF –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
          if (resizeOptions.width || resizeOptions.height) {
            // –£–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –≤—ã—à–µ
          }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      await sharpInstance.toFile(outputPath);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const originalSize = fs.statSync(inputPath).size;
      const optimizedSize = fs.statSync(outputPath).size;
      const savedPercent = Math.round((1 - optimizedSize / originalSize) * 100);
      
      console.log(`üìä –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ${originalSize} ‚Üí ${optimizedSize} –±–∞–π—Ç (${savedPercent}% —ç–∫–æ–Ω–æ–º–∏—è)`);
      
      return outputPath;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: ${error.message}`);
      return inputPath;
    }
  }

  async uploadImage(localImagePath, remoteFileName) {
    try {
      if (!fs.existsSync(localImagePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${localImagePath}`);
      }

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
      const optimizedPath = await this.optimizeImage(localImagePath, remoteFileName);
      const finalPath = optimizedPath;
      
      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
      const fileContent = fs.readFileSync(finalPath);
      const contentType = this.getContentType(finalPath);
      
      const params = {
        Bucket: this.bucketName,
        Key: `images/${remoteFileName}`,
        Body: fileContent,
        ACL: 'public-read',
        ContentType: contentType,
        CacheControl: 'public, max-age=31536000' // 1 –≥–æ–¥ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      };

      const command = new PutObjectCommand(params);
      await this.client.send(command);
      
      const publicUrl = `https://${this.bucketName}.storage.yandexcloud.net/images/${remoteFileName}`;
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (finalPath !== localImagePath && fs.existsSync(finalPath)) {
        fs.unlinkSync(finalPath);
      }
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${publicUrl}`);
      return publicUrl;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`, error.message);
      throw error;
    }
  }

  getContentType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const contentTypes = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.webp': 'image/webp'
    };
    return contentTypes[ext] || 'image/jpeg';
  }

  // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  cleanup() {
    if (fs.existsSync(this.tempDir)) {
      const files = fs.readdirSync(this.tempDir);
      files.forEach(file => {
        const filePath = path.join(this.tempDir, file);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
        }
      });
      fs.rmdirSync(this.tempDir);
      console.log('üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞');
    }
  }
}

async function processCardsData() {
  try {
    if (!fs.existsSync('./data/new-cards.json')) {
      throw new Error('–§–∞–π–ª data/new-cards.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const cardsData = JSON.parse(fs.readFileSync('./data/new-cards.json', 'utf-8'));
    const uploader = new YandexStorageUploader();
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${cardsData.length}`);
    
    let updated = false;
    let successCount = 0;
    let errorCount = 0;
    
    for (const [index, card] of cardsData.entries()) {
      console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${index + 1}/${cardsData.length}: ${card.name} ---`);
      
      if (card.photo && !card.photo.startsWith('https://storage.yandexcloud')) {
        const localImagePath = path.resolve(__dirname, card.photo);
        console.log(`üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: ${localImagePath}`);
        
        if (fs.existsSync(localImagePath)) {
          try {
            console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${card.name}`);
            
            const fileExtension = path.extname(card.photo);
            const baseName = card.slug || card.name || `card-${index}`;
            const fileName = `${baseName.replace(/[^a-zA-Z0-9-_]/g, '-')}-${Date.now()}${fileExtension}`;
            
            console.log(`üè∑Ô∏è  –ò–º—è —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${fileName}`);
            
            const publicUrl = await uploader.uploadImage(localImagePath, fileName);
            
            card.photo = publicUrl;
            updated = true;
            successCount++;
            
            console.log(`‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${card.name}: ${publicUrl}`);
            
          } catch (error) {
            errorCount++;
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${card.name}:`, error.message);
          }
        } else {
          console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${localImagePath}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è  –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL –∏–ª–∏ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${card.photo || '–ø—É—Å—Ç–æ'}`);
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
    
    if (updated) {
      fs.writeFileSync('./data/new-cards.json', JSON.stringify(cardsData, null, 2));
      console.log('üíæ –î–∞–Ω–Ω—ã–µ new-cards.json –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    uploader.cleanup();
    
    return cardsData;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  console.log('YANDEX_ACCESS_KEY_ID:', process.env.YANDEX_ACCESS_KEY_ID ? '‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('YANDEX_SECRET_ACCESS_KEY:', process.env.YANDEX_SECRET_ACCESS_KEY ? '‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('YANDEX_BUCKET_NAME:', process.env.YANDEX_BUCKET_NAME || 'postcards-bucket (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
  
  processCardsData();
}

module.exports = processCardsData;
